trigger:
  branches:
    include:
    - main
  paths:
    include:
    - dev
stages:
- stage: Validate
  jobs:
  - job: terraform_validate
    pool:
      #vmImage: 'ubuntu-latest'
      name: deep09
    steps:
    - task: TerraformInstaller@0
      inputs:
        terraformVersion: 'latest'
    
    - task: TerraformTaskV4@4
      inputs:
        provider: 'azurerm'
        command: 'init'
        workingDirectory: '$(System.DefaultWorkingDirectory)/dev'
        backendServiceArm: 'mydevops'
        backendAzureRmResourceGroupName: 'terrastate'
        backendAzureRmStorageAccountName: 'terrastatesa'
        backendAzureRmContainerName: 'tfstate'
        backendAzureRmKey: 'dev.terraform.tfstate'
    
    - task: TerraformTaskV4@4
      inputs:
        provider: 'azurerm'
        command: 'validate'
        workingDirectory: '$(System.DefaultWorkingDirectory)/dev'

- stage: Dev_Deploy
  condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/main'))
  jobs:
  - deployment: terraform_apply_dev
    environment: dev
    pool:
      #vmImage: 'ubuntu-latest'
      name: deep09
    strategy:
      runOnce:
        deploy:
          steps:
          - task: TerraformInstaller@0
            inputs:
              terraformVersion: 'latest'
          
          - task: TerraformTaskV4@4
            inputs:
              provider: 'azurerm'
              command: 'apply'
              workingDirectory: '$(System.DefaultWorkingDirectory)/dev'
              environmentServiceNameAzureRM: 'mydevops'

- stage: Staging_Deploy
  condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/main'))
  jobs:
  - deployment: terraform_apply_staging
    environment: staging
    pool:
      #vmImage: 'ubuntu-latest'
      name: deep09
    strategy:
      runOnce:
        deploy:
          steps:
          - task: TerraformInstaller@0
            inputs:
              terraformVersion: 'latest'
          
          - task: TerraformTaskV4@4
            inputs:
              provider: 'azurerm'
              command: 'init'
              workingDirectory: '$(System.DefaultWorkingDirectory)/staging'
              backendServiceArm: 'mydevops'
              backendAzureRmResourceGroupName: 'terrastate'
              backendAzureRmStorageAccountName: 'terrastatesa'
              backendAzureRmContainerName: 'tfstate'
              backendAzureRmKey: 'staging.terraform.tfstate'
          
          - task: TerraformTaskV4@4
            inputs:
              provider: 'azurerm'
              command: 'apply'
              workingDirectory: '$(System.DefaultWorkingDirectory)/staging'
              environmentServiceNameAzureRM: 'mydevops'
